(->
  
  ###
  Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.
  
  @module Roles
  ###
  
  ###
  Roles collection documents consist only of an id and a role name.
  ex: { _id:<uuid>, name: "admin" }
  ###
  Meteor.roles = new Meteor.Collection("roles")  unless Meteor.roles
  
  ###
  <p>Role-based authorization compatible with built-in Meteor accounts package.</p>
  <br />
  <p>Uses 'roles' collection to store existing roles with unique index on 'name' field.</p>
  <p>Adds a 'roles' field to user objects in 'users' collection when they are added to a given role.</p>
  
  @class Roles
  @constructor
  ###
  Roles = {}  if "undefined" is typeof Roles
  
  ###
  Create a new role. Whitespace will be trimmed.
  
  @method createRole
  @param {String} role Name of role
  @return {String} id of new role
  ###
  Roles.createRole = (role) ->
    id = undefined
    match = undefined
    return  if not role or "string" isnt typeof role or role.trim().length is 0
    try
      id = Meteor.roles.insert(name: role.trim())
      return id
    catch e
      
      # (from Meteor accounts-base package, insertUserDoc func)
      # XXX string parsing sucks, maybe
      # https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day
      throw e  if e.name isnt "MongoError"
      match = e.err.match(/^E11000 duplicate key error index: ([^ ]+)/)
      throw e  unless match
      throw new Meteor.Error(403, "Role already exists.")  if match[1].indexOf("$name") isnt -1
      throw e

  
  ###
  Delete an existing role.  Will throw "Role in use" error if any users
  are currently assigned to the target role.
  
  @method deleteRole
  @param {String} role Name of role
  ###
  Roles.deleteRole = (role) ->
    return  unless role
    foundExistingUser = Meteor.users.findOne(
      roles:
        $in: [role]
    ,
      _id: 1
    )
    throw new Meteor.Error(403, "Role in use")  if foundExistingUser
    Meteor.roles.remove name: role

  
  ###
  Add users to roles. Will create roles as needed.
  
  Makes 2 calls to database:
  1. retrieve list of all existing roles
  2. update users' roles
  
  @method addUsersToRoles
  @param {Array|String} users id(s) of users to add to roles
  @param {Array|String} roles name(s) of roles to add users to
  ###
  Roles.addUsersToRoles = (users, roles) ->
    throw new Error("Missing 'users' param")  unless users
    throw new Error("Missing 'roles' param")  unless roles
    existingRoles = undefined
    
    # ensure arrays
    users = [users]  unless _.isArray(users)
    roles = [roles]  unless _.isArray(roles)
    
    # remove invalid roles
    roles = _.reduce(roles, (memo, role) ->
      memo.push role.trim()  if role and "string" is typeof role and role.trim().length > 0
      memo
    , [])
    return  if roles.length is 0
    
    # ensure all roles exist in 'roles' collection
    existingRoles = _.reduce(Meteor.roles.find({}).fetch(), (memo, role) ->
      memo[role.name] = true
      memo
    , {})
    _.each roles, (role) ->
      Roles.createRole role  unless existingRoles[role]

    
    # update all users, adding to roles set
    Meteor.users.update
      _id:
        $in: users
    ,
      $addToSet:
        roles:
          $each: roles
    ,
      multi: true


  
  ###
  Remove users from roles
  
  @method removeUsersFromRoles
  @param {Array|String} users id(s) of users to add to roles
  @param {Array|String} roles name(s) of roles to add users to
  ###
  Roles.removeUsersFromRoles = (users, roles) ->
    throw new Error("Missing 'users' param")  unless users
    throw new Error("Missing 'roles' param")  unless roles
    
    # ensure arrays
    users = [users]  unless _.isArray(users)
    roles = [roles]  unless _.isArray(roles)
    
    # update all users, remove from roles set
    Meteor.users.update
      _id:
        $in: users
    ,
      $pullAll:
        roles: roles
    ,
      multi: true


  
  ###
  Check if user is in role
  
  @method userIsInRole
  @param {String|Object} user Id of user or actual user object
  @param {String|Array} roles Name of role or Array of roles to check against.  If array, will return true if user is in _any_ role.
  @return {Boolean} true if user is in _any_ of the target roles
  ###
  Roles.userIsInRole = (user, roles) ->
    id = undefined
    userRoles = undefined
    
    # ensure array to simplify code
    roles = [roles]  unless _.isArray(roles)
    unless user
      return false
    else if "object" is typeof user
      userRoles = user.roles
      if _.isArray(userRoles)
        return _.some(roles, (role) ->
          _.contains userRoles, role
        )
      
      # missing roles field, try going direct via id
      id = user._id
    else id = user  if "string" is typeof user
    return false  unless id
    Meteor.users.findOne
      _id: id
      roles:
        $in: roles
    ,
      _id: 1


  
  ###
  Retrieve users roles
  
  @method getRolesForUser
  @param {String} user Id of user
  @return {Array} Array of user's roles, unsorted
  ###
  Roles.getRolesForUser = (user) ->
    user = Meteor.users.findOne(
      _id: user
    ,
      _id: 0
      roles: 1
    )
    (if user then user.roles else `undefined`)

  
  ###
  Retrieve all existing roles
  
  @method getAllRoles
  @return {Cursor} cursor of existing roles
  ###
  Roles.getAllRoles = ->
    Meteor.roles.find {},
      sort:
        name: 1


  
  ###
  Retrieve all users who are in target role
  
  @method getUsersInRole
  @param {String} role Name of role
  @return {Cursor} cursor of users in role
  ###
  Roles.getUsersInRole = (role) ->
    Meteor.users.find roles:
      $in: [role]

)()
